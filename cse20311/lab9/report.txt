Program: report.txt
Authors: Grace Milton and Roann Yanes

    Our program (crossword.cpp), from the user's perspective, creates a blank crossword anagram puzzle on a 15-by-15 board, that can be played with paper and pencil. The program provides a solution for the player who gets stuck. Upon running the program, the user is asked to enter up to twenty words followed by a period; most or all of these words will appear in the crossword puzzle. The program only accepts 20 words, or the user can enter less than 20 words followed by a period. If the user enters a word that is greater than 15 letters, a message is displayed to the user explaining that the word was omitted. If the user enters a word that contains a character that is not a letter, the program displays an appropriate error message and ends. If a word cannot be placed, then an appropriate message is displayed to the user explaining that the word could not fit on the board. The solution to the crossword puzzle is first displayed to the user. Then, the actual crossword puzzle is displayed to the user, which is a board with blank spaces that indicate where the letters are to be placed. The program also provides clues to the user, which are anagrams of the words the user entered (and that are on the board) with the coordinates of each of the words on the board of the crossword puzzle.

    Internally, the program, from the programmer's perspective, is essentially a driver to test the Crossboard class which contains methods to implement the crossword puzzle. The crossword.cpp program begins by declaring and initializing characters, integers, vectors, and 2-D character arrays. The Crossboard class is also called to use the class's methods to create a crossword puzzle.  First, the user is prompted to enter up to 20 words followed by a ".", and the program stores each user-entered word in a vector of strings using "push_back". The program utilizes a while loop to ensure that only the first 20 words the user entered are used in the program. Two if-statements are also utilized inside the while loop to check that the length of the words the user entered do not exceed 15 letters and to check if the user has entered a period, which causes the program to break out of the while loop. The vector of strings is then sorted by longest word to shortest word by the "sortbysize"structure and the "sort" function, which compares the length of two words and returns a boolean value depending on if the first word is greater than the second word. A for loop is then used to convert all the words in the vector of strings to cstrings using the "strcpy" function and utilizes the "toupper" function to convert all the characters/letters to uppercase letters. Inside the for loop is an if-statement that checks if all the characters in the character array are, in fact, letters using the "isalpha" function. If there is a character that is not a letter, then the program exits. The program then calls the first element of the character array and inputs that element into the Crossboard method "addfirst" to add that word to the middle of the crossword puzzle's board, as the first element of the character array is the longest word the user entered. The "addfirst" method in the Crossboard class completes calculations to ensure that the longest word is put in the middle of the board, sets the word's x- and y-coordinates utilizing the class's setxCoordinate and setyCoordinate methods, and then adds the word to the crossword puzzle. The direction of the word (across in this case) is then stored in a vector of strings called "direction", using "push_back" (the direction of each word is displayed in the clues to the user). A for loop is used to add the rest of the elements (words) in the character array to the board.  In the for loop, the "findmatch" utility method is used to find a letter in the character array that matches a letter from another word in the character array. "Findmatch" returns a number to determine if the word is vertical, horizontal, or cannot be placed. The method goes through a series of for loops and if-statements to determine if the word should be placed horizontally or vertically depending on the intersection point of the word with its match and the amount of room the word has to be placed; then, the method sets the x- and y-coordinates of the word. If the word is placed vertically, the function returns 1, horizontally, 2 is returned, and  if a match is not found, 3 is returned. Based on the value that is returned from "findmatch", the program either displays an error message to the user (if the word could not be placed (3)), stores "Down" in the "direction" vector (if the word was placed vertically (1)), or stores "Across" in the "direction" vector (if the word was placed horizontally (2)). The program continues to add the rest of the words to the crossword puzzle by using the "addmore" utility method which utilizes a switch case to add the words to the board vertically or horizontally by going through the length of the word and incrementing through the row or column. First, the solution to the crossword puzzle is displayed to the user using the "displaySolution" utility method in the Crossboard class, which prints out the crossword puzzle with the words the user entered in a formatted way. The "displaySolution" method makes use of nested for loops to get a two-dimensional array of characters. Then, the "displayBoard" utility method in the Crossboard class prints out the crossword puzzle without the words the user entered in a formatted way. The "displayBoard" method makes use of nested for loops to get a two-dimensional array of characters, which are just blank spaces (where the words are supposed to go) and pound signs. Clues are displayed to the user by converting the vector of strings (called "words") into anagrams by using the "random_shuffle" function, and again, the anagrams are made uppercase strings by using the "to_upper" function; this is all completed in a for loop, and then displayed to the user. The coordinates and directions of the words in the crossword puzzle are displayed to the user by utilizing a for loop and the "getyCoordinate" and "getxCoordinate" methods.

     In order to evaluate the program for correctness, we ran the program several times with a wide variety of words to ensure that what the program was outputting for the crossword puzzle was correct and followed the instructions of the lab. We input words of various lengths and different combinations of words to test and prepare for all sorts of scenarios (inputting two 15-letter words, repeating a word, etc.). We also input the words that were shown in the example output of the lab to see how our code ran in comparison to the code that was used in the example output. We tested our error messages and the constraints of the lab by inputting words with characters that were not letters, words that were greater than 15 letters, and by inputting more than 20 words upon running the program. The program displayed the correct output in each of these scenarios.
