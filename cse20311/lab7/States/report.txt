Program: report.txt
Author: Roann Yanes

    My program (statemain.cpp), from the user's perspective, stores and informs the user of basic information on U.S. states. The program first prompts the user for a data file that contains information about all fifty states, and then displays a menu of options to the user that allows the user to display all states and their data currently in the database (option 1),  display all the data for any given state (option 2), display states with a population size that is greater than or equal to a size that the user enters (option 3), display states that were given statehood in a given year (option 4), display that capital of a given state (option 5), and/or quit the program (option 6), as the program keeps running until the user decides to input the correct command to exit. If the user enters a file that does not exist, then the program will display an error message. The user is then asked to input a number corresponding to the option in the menu he/she would like to interact with. If the user enters an incorrect input (in this case, a number that is not between one and six), an error message is displayed. In option one, the program displays all of the states that are currently in the database and their data (from the data file the user previously input) in a vertical list. The data about the states includes the state abbreviation, the state name, capital, population, the year it became a state, and the number of representatives in Congress. In option two, the user is asked to input the abbreviation of the state he/she would like to see all the data for in the database, and then the program displays all of the data about the state (state abbreviation, state name, capital, population, the year it became a state, and the number of representatives in Congress) in a vertical list. If the user enters an incorrect abbreviation (one that does not exist or one that is in all lowercase letters), then an error message is presented to the user, informing him/her that there are no states with the given abbreviation and tells him/her to enter a proper abbreviation. Upon selecting option three, the user is asked to enter the population size he/she would like to search for in the database, and the states and their populations that are greater than or equal to the given population size are displayed to the user in a list. If the user enters a population size that does not exist (or is a negative number) in the program, then a message is displayed to the user explaining that there are no states with the population size that was entered. When option four is selected, the user is asked to input the year of statehood he/she would like to search for in the program, and the program shows the year and the states that were admitted to the union during that year. If the user enters a year in which no states were admitted to the union, then a message is shown to the user saying that no states were admitted to the union during that given user. Upon selecting option five of the program, the user is asked to input the abbreviation of the state he/she would like to see the capital of in the database, and then the program displays the abbreviation, capital of the state, and the state's name. If the user enters an incorrect abbreviation (one that does not exist or one that is in all lowercase letters), then an error message is presented to the user, informing him/her that there are no states with the given abbreviation and tells him/her to enter a proper abbreviation. When the user selects option five, the program thanks the user and exits.    

    Internally, the program, from the programmer's perspective, is a driver to test the State class. It begins by declaring and initializing variables, strings, and integers, and a vector is created (using the State class) to eventually store the states and their data from the ".csv" file the user inputs at the beginning of the program. Then, the program prompts the user to input the data file and opens it using the ifstream function. The program checks to make sure the data file the user inputs is a valid one and displays an error message if it is not. Then, the states and  their data from the data file are read into the program using a while loop and the "getline" and "push_back" features to store each state and the data about the state as an element in the vector. The while loop runs until the "EOF" feature reads true, signaling that the end of the data file was reached. Next, the program uses the "menu" function that contains the six options (as defined in the previous section) the user can utilize while the program is running. The "menu" function also prompts the user to input a choice. Once the user enters a number corresponding to the option he/she would like to interact with, the program enters a while loop that contains a switch case and the "menu" function because the program keeps running until the user decides to quit so the menu must appear until the user quits. The while loop runs when the user's "choice" input does not equal six (which is the number to exit the program), and the cases inside the while loop correspond to the six options and contain functions that perform the tasks for each of the five options. Case 1 contains a "displayall" function that utilizes a for loop to go through the vector of states and their data and displays each one in a vertical list. This function makes use of the "print" utility method in the State class that prints out a state and its data in a formatted way. The iterator goes through the vector and inputs each line into the "print" utility method to output each state and its data in a formatted way. Case 2 prompts the user to enter the abbreviation of the state he/she would like to search for and contains a "statesearch" function that utilizes a for loop and an if statement to find the state abbreviation in the database that matches the user's input in order to get the data about the state the user chose. Again, the iterator goes through the vector and inputs the line of the vector that matches the user's input into the "print" utility method to output the state and its data in a formatted way. If none of the states' abbreviations match the one the user entered, then a message is displayed to the user informing him/her of this. Case 3 prompts the user to enter the population size he/she would like to search for and contains a "populationsearch" function that uses a for loop and an if statement to search for all the states with population sizes that are greater than or equal to the population size the user entered. This function makes use of the "printPopulation" utility method in the State class that prints out a state and its population size in a formatted way. The iterator goes through the vector and inputs each line of the vector that matches the necessary conditions of the if statement into the "printPopulation" utility method to output each state and its population size in a formatted way. If none of the states' populations match the one the user entered, then a message is displayed to the user informing him/her of this. Case 4 prompts the user to enter the year of statehood he/she would like to search for and contains a "yearsearch" function that uses a for loop and an if statement to search for all the states with the year of statehood that match the year the user has entered. This function makes use of the "printYear" utility method in the State class that prints out a state and its year of statehood in a formatted way. The iterator goes through the vector and inputs each line of the vector that matches the necessary conditions of the if statement into the "printYear" utility method to output each state and its year in a formatted way. If none of the years of statehood in the database match the one the user entered, then a message is displayed to the user informing him/her of this.  Case 5 prompts the user to enter the abbreviation of the state he/she would like to search for and contains a "capitalsearch" function that utilizes a for loop and an if statement to find the state abbreviation in the database that matches the user's input in order to get the capital of the state the user chose. This function makes use of the "printCapital" utility method in the State class that prints out a state, its abbreviation, and its capital in a formatted way. The iterator goes through the vector and inputs the data of the vector that matches the user's input into the "printYear" utility method to output only the state, its abbreviation, and its capital in a formatted way. If none of the states' abbreviations match the one the user entered, then a message is displayed to the user informing him/her of this. Case 6 exits the program. Inside the while loop, there is also an if statement that checks to make sure the user's input is valid and displays an error message if it is not.

    In order to evaluate the program for correctness, I ran the program several times to ensure that what my program was outputting for each of the options listed above was correct. I input files that did not exist, and I input numbers that were less than one and numbers that were greater than six to see if my error messages were working (for the menu option). I tested each option of the program  repeatedly to ensure that all the features in each option were outputting the right information. I compared the outputs of each option with the data stored in the usstates.csv file to ensure that my program was running correctly. I also input incorrect inputs into each option of my program to ensure that my error messages and if statements were working properly. 
