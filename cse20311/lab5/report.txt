Program: report.txt
Author: Roann Yanes

	My program (mysayings.cpp), from the user's perspective, stores and manages several sayings (or phrases). The program first prompts the user for a "startup" data file that contains some sayings, and then displays a menu of options to the user that allows the user to display all sayings currently in the database (option 1), enter a new saying into the database (option 2), list sayings that contain a given word (substring) entered by the user (option 3), save all sayings in a new textfile (option 4), and/or quit the program (option 5), as the program keeps running until the user decides to input the correct command to exit. If the user enters a file that does not exist, then the program will display an error message. The user is then asked to input a number corresponding to the option in the menu he/she would like to interact with. If the user enters an incorrect input (in this case, a number that is not between one and five), an error message is displayed. In option one, the program displays all of the phrases that are currently in the data file (the user previously input) in a vertical list. In option two, the user is asked to input a new phrase that he/she would like to temporarily store in the data file, and then, the user is given a message ("Added!") that confirms the phrase was added to the file. Upon selecting option three, the user is asked to enter a word (or part of a word) to search for in the data file, and the phrases that contain the word (or substring) are displayed to the user in a list. When option four is selected, the user is asked to input a name for the file he/she would like to save the phrases under, and then the user is given a message ("Saved!") that confirms the new file was saved. When the user selects option five, the program thanks the user and exits.    

	Internally, the program begins by declaring and initializing variables and strings, and a vector of strings is created to eventually store the sayings from the "startup" file the user inputs at the beginning of the program. Then, the program prompts the user to input the data file and opens it using the ifstream function. The program checks to make sure the data file the user inputs is a valid one and displays an error message if it is not. Then, the sayings from the data file are read into the program using a while loop and the "getline" and "push_back" features. The while loop runs until the "eof" feature reads true, signaling that the end of the data file was reached. Next, the program uses the "menu" function that contains the five options (as defined in the previous section) the user can utilize while the program is running. The "menu" function also prompts the user to input a choice. Once the user enters a number corresponding to the option he/she would like to interact with, the program enters a while loop that contains a switch case and the "menu" function because the program keeps running until the user decides to quit so the menu must appear until the user quits. The while loop runs when the user's "choice" input does not equal five (which is the number to exit the program), and the cases inside the while loop correspond to the five options and contain functions that perform the tasks for each of the five options. Case 1 contains a "displaysayings" function that utilizes a for loop to go through the vector of sayings and display each one in a vertical list. Case 2 prompts the user to enter a new saying and contains a "newsayings" function that utilizes "getline" to get the new phrase and "push_back" to add the new phrase to the end of the vector. Case 3 prompts the user to enter a word he/she would like to search for and contains a "stringsearch" function that uses a for loop to search for the word in the entire vector and uses an if statement and "find" feature to display all of the phrases that match the user's word. Case 4 prompts the user to enter the name of the file he/she would like to save the phrases under and contains a "savefile" function that utilizes "ofstream" to open a newfile and a for loop to save all the sayings currently stored in the vector to the new file the user input and closes the file. Case 5 exits the program. Inside the while loop, there is an if statement that checks to make sure the user's input is valid and displays an error message if it is not.

	In order to evaluate the program for correctness, I ran the program several times to ensure that what my program was outputting for each of the options listed above was correct. I input files that did not exist, and I input numbers that were less than one and numbers that were greater than five to see if my error messages wereworking. I also read in different data files at the start of the program to make certain that everything in my program was running smoothly. I also tested the option that saves the phrases to a new file several times, and I opened these files and read them back into the program as data files to make sure they were valid data files. Finally, for option two, I input phrases of various lengths to see how that would affect my program.
