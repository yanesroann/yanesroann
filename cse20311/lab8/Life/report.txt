Program: report.txt
Author: Roann Yanes

	My program (life.cpp), from the user's perspective, simulates Conway's Game of Life on a 40-by-40 board, displayed as Xs (live cells) and blank spaces (dead cells). The program runs in either interactive mode when the program is executed with no command line arguments or in batch mode when a data file is present after the executable and use that file as its scene. Upon entering interactive mode, the blank board, and a menu is displayed to the user. The menu contains five different options the user can choose from to interact with the program. These options are 'a', 'r', 'n', 'q', and 'p'. The user is then asked to input the letter corresponding to the option in the menu he/she would like to interact with.  Option 'a' asks the user for coordinates to add a cell on the board. If the user enters an incorrect x-coordinate or y-coordinate, the program will display an error message. Option 'r' asks the user for coordinates to remove a cell on the board. If the user enters an incorrect x-coordinate or y-coordinate, the program will display an error message. Option 'n' advances the simulation to the next iteration by applying the rules of the game. According to the rules, any live cell with fewer than two live neighbors dies, any live cell with two or three live neighbors lives on to the next generation, any live cell with more than three live neighbors dies, and any dead cell with exactly three live neighbors becomes a live cell. Option 'p' plays the game continuously (according to the rules of the game) without asking for any more input. The program runs until the user decides to quit by entering 'q'. When the user selects option 'q', the program thanks the user and exits.
	
	To enter batch mode, the user must enter a valid text file at the command line after the executable. The text file contains commands to add live cells to the game, followed by a "p" to play the scene forever. The user can end the scene by pressing "CTRL-C". 

	Internally, the program, from the programmer's perspective, is essentially a driver to test the Lifeboard class which contains methods to implement Conway's Game of Life. The life.cpp program begins by declaring and initializing characters and integers, and a two-dimensional array of characters is created (using the Lifeboard class). If the user does not enter a text file after running the "playlife" executable, then the game runs in interactive mode. If the user enters a text file after the executable, the program runs in batch mode. The program checks if the user is attempting to access interactive mode or batch mode by using "argc" to see how many arguments are entered at the command line. If the user enters interactive mode (when "argc" only equals one),  then the user is asked to input a choice from the menu. From there, the program enters a switch case that is in a while loop that runs while the user's choice does not equal 'q'. At the end of the while loop, the program contains the menu that has the five options (as defined in the previous section) the user can utilize while the program is running because the program keeps running until the user decides to quit so the menu must appear until the user quits. The cases in the switch case correspond to the options in the menu and contain functions to run the proper features of the program. Case 'a' allows the user to input the x- and y-coordinates of the live cell that he/she would like to placeon the board, and then a method ("addCell) in the Lifeboard class is called to input an "X" on the board in the spot the user chose. Then, the "displayBoard" utility method in the Lifeboard class prints out a board and the point the user entered in a formatted way. The "displayBoard" method makes use of nested for loops to geta two-dimensional array of characters. Case 'r' allows the user to input the x- and y-coordinates of the live cell that he/she would like to remove from  the board, and then a method ("removeCell) in the Lifeboard class is called to input a blank space on the board in the spot the user chose. Then, the "displayBoard" utility method in the Lifeboard class prints out an updated board without the point the user chose to remove. Case 'n' only contains the "advance" utility method. In the class implementation, the method assigns a temporary board to the current board to store the current state of the world, and use the temporary board to fill in the future state of the world; nested for loop and a series of if statements are utilized to check the neighbors (in all eight locations) of all the points on the temporary board. If there is a neighbor in one of the eight locations, then a "liveNeighbors" count increases each time. The if statements also check to see if the live cells are at the edge of the board to prevent the board from being infinite using the "checkBoard" utility method. Three more if statements are used to see if the "liveNeighbors" count is less than two or greater than three (as the cell dies in both cases), equal to two (as the cell lives on to the next generation), or equal to three (as the cell becomes a live cell or stays a live cell). The board is then updated to display the next generation of cells based on the appropriate actions and conditions. Case 'q' exits the program. Case 'p' has a while loop with a condition that is always true to make it run continuously. The while loop contains the "advance" and "displayBoard" methods to continuously advance the simulation to each iteration by applying the rules of the game and displays what happens to the user. The "usleep" function pauses the simulation so that the user can see what is happening.

	Upon entering batch mode, the program prompts the user to input the text file and opens it using the ifstream function. The program checks to make sure the data file the user inputs is a valid one and displays an error message if it is not. Then, the commands from the text file are read into the program using a while loop and the "getline" feature to store each command as a string. The while loop runs until the "eof" feature reads true, signaling that the end of the text file wasreached. As, each command is read in, the numbers from the text file are converted to ints, and the letters are converted to "chars". When the character from the text file is an 'a' followed by two integers, the if statement that matches this condition is entered, and it utilizes the "addCell" method to add a live cell to the board. When the character from the text file is a 'p', the if statement that matches this condition is entered, and the if statement has a while loop with a condition that is always true to make it run continuously. The while loop contains the "advance" and "displayBoard" methods to continuously advance the simulation to each iteration by applying the rules of the game and displays what happens to the user. The "usleep" function pauses the simulation so that the user can see what is happening. These two if statements are placed in the while loop. 

	In order to evaluate the program for correctness, I ran the program several times to ensure that what my program was outputting for each of the cases in interactive mode was correct. I ran each case repeatedly. I input negative values for the x-coordinates and y-coordinates to ensure that my error messages were working properly. Upon entering batch mode, I input text files that did not exist to ensure that my error message was working. I mainly tested batch mode by running my five scenes. In scene1.txt, there are five different "still life" objects that do not change. In scene2.txt there are different "oscillators" that progress through some stages but return to the same shape in the end. In scene3.txt four different objects move across the screen in various directions. In scene4.txt, there is a large amount of initial activity but then settles down into, mainly, still life and oscillators. In scene5.txt, I created a gun and a few other objects. I compared my results to a Conway's Game of Life application online to ensure that all the features in each option were working properly. 
