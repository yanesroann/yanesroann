Program: report.txt (open in large window please)
Author: Roann Yanes

     From the user's perspective,  the program begins by dealing two cards to the user and the dealer and displaying the sums of the user's two cards and the dealer's two cards.  The program then asks the user if he/she would like to "hit" (add another card to his/her hand) or "stand" (let the dealer take his turn). If the user presses the corresponding number to "hit" (which is '1'), the program deals the player a new card, adds the card's value to the player's hand, and displays the sum to the user. If the sum exceeds 21, the player loses, the dealer wins, and the program displays a running count of the player's wins and the dealer's wins. The program then asks the user if he/she would like to start a new game or exit the program. If the player chooses to start a new game, the program deals two new cards to both the dealer and the user and goes through the same process as described above. If the player exits, the program thanks the user and quits. If the sum is equal to 21, the player wins, and the program displays a running count of the player's wins and the dealer's wins. The program then asks the user if he/she would like to start a new game or exit the program. If the player chooses to start a new game, the program deals two new cards to both the dealer and the user and goes through the same process as described above. If the player exits, the program thanks the user and quits. If the sum is less than 21, the program asks the user if he/she would like to "hit" or "stand" again. 
     Once the player decides to "stand", the dealer draws cards from the deck until the dealer's hand reaches a total value of at least 17. If the dealer's hand is less than the player's hand, the player wins, and the program displays a running count of the player's wins and the dealer's wins. The program then asks the user if he/she would like to start a new game or exit the program. If the player chooses to start a new game, the program deals two new cards to both the dealer and the user and goes through the same process as described above. If the player exits, the program thanks the user and quits. If the dealer's hand is greater than the player's hand, the dealer wins, and the program displays a running count of the player's wins and the dealer's wins. The program then asks the user if he/she would like to start a new game or exit the program. If the player chooses to start a new game, the program deals two new cards to both the dealer and the user and goes through the same process as described above. If the player exits, the program thanks the user and quits. If the dealer's hand is equal to the player's hand, no one wins, and the program displays a running count of the player's wins and the dealer's wins. The program then asks the user if he/she would like to start a new game or exit the program. If the player chooses to start a new game, the program deals two new cards to both the dealer and the user and goes through the same process as described above. If the player exits, the program thanks the user and quits.

     From the programmer's perspective, in the main.cpp program,  an object of the BlackJack class is instantiated and the play() function from the BlackJack class is called to play Black Jack. In the play() function, the deal() function is first called to give the player and the dealer two cards each. The deal() function uses composition to call the shuffle() function on the instantiated Cards object to create a new deck of cards; an if-statement is in place to ensure that a new deck is only created at the beginning of the game and if there are less than 15 cards in the deck. One card is taken from the deck by calling the getCard() function and stored in "card". The program enters a switch case to determine the value of the card and what the card looks like to the user. The randomcard() variable is incremented to grab the next card in the deck when deal() is called the next time and to determine how many cards are left in the deck. The deal() function returns the value of the card to sum the cards together in the play() function.  The values returned from the deal() function (which was called twice) to give the player two cards is summed together and stored in playersum. A similar action was done for the dealer as well. The program then asks the user for input to see if the user would like to "hit" or "stand", and enters a while loop and a series of if statements based on the user input. If the user chooses to "hit", the deal() function is called to assign a new card to the user and its value is summed to the player's total. Series of if statements determine whether or not the user won (playersum == 21), the user lost (playersum > 21), or if the player can still "hit" or "pass" (playersum < 21).  Upon winning or losing, a running tally of the user's and the dealer's wins is displayed, and the user is asked if he/she would like to play again or quit; when the user decides to play again, a new game starts using cards from the same deck. When the player quits, a "break" is used to exit the program.  When the user decides to "stand", a while loop is entered and the deal() function is called for the dealer until the dealer's total is greater than or equal to 17. Series of if statements determine whether or not the user won (dealersum < playersum ), the user lost (dealersum > playersum), or if there is a tie (playersum == dealersum).  Upon winning or losing, a running tally of the user's and the dealer's wins is displayed, and the user is asked if he/she would like to play again or quit; when the user decides to play again, a new game starts using cards from the same deck. When the player quits, a "break" is used to exit the program.
     
     In order to verify that the program works properly, I ran the executable several times. I tested the "hit" and "stand" options of the program to ensure that all the features were running properly. I also tested my play() function to see if the running total of wins and the player's and dealer's sums were being tallied properly by keeping track of the tallies manually. I also made sure that the rules of the game were being followed by playing an online version of Black Jack and comparing my program's executable to the online game. I made sure that the dealer never loses by adding if-statements. I also made sure that a new deck was being used when there were less than 15 cards in the deck by displaying the entire deck after a new deck was shuffled in the deal() function (I deleted this feature, as it was only necessary for troubleshooting).
