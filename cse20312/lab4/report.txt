Program: report.txt
Author: Roann Yanes (please open in a bigger window)

From the user's perspective, the program works by asking the user to input the name of the file containing an unsolved Sudoku puzzle, after the executable. If the file does not exist, an error message is displayed to the user. If the file exists, the program displays the solutions to the unsolved Sudoku puzzle (the puzzle the user input at the beginning) to the user in the terminal.

From the programmer's perspective, the program (main.cpp) calls an instantiation of the Sudoku class and implements the getBoard(), elimination(), and setCells() functions to solve an easy level Sudoku puzzle. In the constructor of the Sudoku class, the user is asked to input a file, and the numbers in the file are stored in a character array and converted to integers; an instantiation of the Cell class is then called to assign those values in the array to cellContent, and those values are then added/assigned to their proper locations using nested for-loops. The getBoard() method uses to nested for-loops to print out the Sudoku puzzle to the user. The Board is a 3D array of integers that is of the Cell class (which contains an array called Possibilities that contains the numbers 1-9). The elimination() function uses a series of if-statements and for-loops to check (under certain conditions) when a possibility at a certain location on the board should be set to zero (meaning that it is no longer a possibility for that cell). It checks the rows, columns, and mini-grids to see if a number can no longer be a possibility for a cell because it already exists in that row, column, or mini-grid. The setCells() method checks if the Possibilities array of a certain cell on the Board has only one number in the array that has not been set to 0 (meaning that it is no longer a possibility for that cell on the board) because then that number is the number that should be on the board), and sets that specific number in the Possibilities array as the cell content on the board. The checkFull() method checks for when the board does not contain any more zeros (meaning it is completely solved). The checkRow() and checkCol() methods were my attempt at implementing the singleton algorithm. 

I verified that the program was working properly by using the Sudoku solver website provided to us in the lab document. I made sure that the solutions to the puzzle displayed on the website matched the solutions that are displayed on the terminal after the program runs. I input several easy level Sudoku puzzles into my program to verify that the program was working properly and checked my program's output with the output of the online Sudoku solver. 

I believe that making a 3D array of some kind was the best way to implement this Sudoku solver. I do not believe that I completed this lab in an efficient manner. Essentially, for elimination, I used a bunch of if-statements and for-loops to check the rows, columns, and mini-grids for a single possible solution. It was quite difficult to understand what was going on most of the time. I do not know if there was an easier way to check each row, column, or mini-grid, but I do not think an endless series of for-loops and if-statements worked very well (even though it got the job done); it became very chaotic trying to read through all of the for-loops and if-statements. The for-loops were used to iterate through the board at certain locations (row, column, mini-grid), while the if-statements were used to make sure that the possibilities for a certain cell were only being eliminated under certain conditions for the row, column, and mini-grid. My singleton algorithm did not work very well at all; in fact, I am unsure as to how/why it works the way it does. I tried to reuse code and be efficient, but I think I ended up ruining my singleton algorithm by trying to implement the algorithm the way I did. The only thing that I did moderately well was my elimination() method, in my opinion.

Just a side note, if you uncomment the two lines of code that are in main.cpp, it solves the medium puzzle partially, but it messes with my elimination() algorithm. The two lines of code (they are functions of the Sudoku class) that are commented out were my attempt at implementing the singleton algorithm. I plan on redoing this lab to implement the singleton algorithm properly. I just could not wrap my mind around how to properly implement the algorithm.
