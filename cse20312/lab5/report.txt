Program: report.txt
Author: Roann Yanes

(May have to open in larger window)

     From the user's perspective, the program works by allowing the user to input numbers at the command line that represent a binary tree (the nodes of the binary tree); the program reads from standard input. The program (bst.cpp) returns a message to the user informing him/her if the numbers they entered for a given tree make it a binary search tree. The program takes input from the user until he/she presses CTRL-D or quits the program.

     From the programmer's perspective, the program works by using a while loop to read in from standard input until the user enters CTRL-D at the command line. The program takes the very first number the user enters (as that is the size of the tree), stores it as the size, and then uses a for loop to read the rest of the numbers from the user until the number of nodes the user entered equals the size of that specified tree. The trees are represented as vectors (with the left child of the tree located at 2i+1  and the right child of the tree located at 2i+2 for a node at index i). The function BSTtest checks for the binary search tree property using recursion. The base case for BSTtest is when the root is greater than or equal to the number of nodes (which means the program ran through all of the nodes without reaching a node that violated the binary search tree properties so the function returns true); the function has an if-statement that checks to make sure the function is not checking empty nodes (denoted by -1). The two other if statements inside that if statement also check to ensure that the value at the current node is never less than an entry in its left subtree and/or that the value at the current node is less than every entry in its right subtree; if the node violated either of these, then the function returned false. The function then returns the boolean value of running the BSTtest function on both the left children and right children (recursion); the function traverses down the tree to keep track of the narrowing min and max values as it continues, looking at each of the tree's nodes once. The BSTtest returns a boolean value (true or false) to determine if a given tree has the binary search tree property. If the given tree, is a binary search tree, the BSTtest function returns true and an appropriate message is displayed to the user. If the given tree, is not a binary search tree, the BSTtest function returns true and an appropriate message is displayed to the user. The program also keeps a running tally of the number of trees the user enters while using the program so that the user can keep track of which trees he/she entered are or are not binary search trees.

     I ensured that my program worked properly by running the executable multiple times and by running the memory, output, and time tests. My program passed all of the tests, and I manually entered a variety of numbers to ensure that my program was working properly and checking for the binary search tree property correctly.

