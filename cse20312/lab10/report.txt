Program: report.txt
Author: Roann Yanes

	From the user's perspective, the program allows the user to enter the number of vertices in the undirected graph, followed by a distance matrix with each row separated by newlines and each column separated by spaces. The program reads in from standard input and runs until the user enters CTRL-D or quits the program. The program tells the user the total weight of the minimum spanning tree, and then the edges of the minimum spanning tree represented by the two vertices.

	From the programmer's perspective, the program begins by initializing the number of vertices the user will input. An adjacency matrix is also created to represent the undirected graph (`adjacency_matrix[][]`) which stores the nodes the user inputs into the program. The source and destination are read in (inside a while loop that runs until the user enters CTRL-D) and stored in the adjacency matrix. Then, the adjacency matrix and the number of vertices in the tree are passed into the internal `minimum_spanning_tree()` function (which uses Prim's Algorithm to find the minimum spanning tree and the total weight of the tree). The `minimum_spanning_tree()` function creates a set that keeps track of the vertices included in the adjacency matrix, and then assigns a key value as 0 for the first vertex in the priority queue, so that that is the first vertex that is picked. There is a while loop that runs while the priority queue is not empty and takes the vertex that has not been visited yet and has the minimum key value. The vertex is marked as visited, and the key values of the adjacent vertices are updated. The nodes are converted from ints to chars using the `number_to_letter()` function which converts the nodes of the adjacency matrix from numbers to their corresponding letters. Then, the node pairs that are supposed to be included in the minimum spanning tree are stored in a map and printed out in the proper order. 
	
	I ensured that my program worked properly by running the executable multiple times and by running the memory, output, and time tests. My program passed all of the tests, and I manually entered a variety of undirected graphs to ensure that my program was working properly and correctly determining the minimum spanning tree.
