Program: report.txt
Author: Roann Yanes

(May have to open in larger window)

	From the user's perspective, the program works by allowing the user to input cardholders and their card values at the command line; the program reads from standard input. The program (cards.cpp) returns the names of the cardholders in the order of highest card value to lowest. The program takes input from the user until he/she presses CTRL-D, quits the program, or until the user enters '-1'.

	From the programmer's perspective, the program works by using a while loop to read in from standard input until the user enters CTRL-D or '-1' at the command line. The program takes the very first number the user enters (as that is the number of cardholders the user wants to sort), stores it as the number of cardholders, and then uses a for loop to read the rest of the information about the cardholders from the user until the number of cardholders the user entered equals the number of cardholders specified by the user when inputting the very first number. These objects of the CardHolders class are stored in a vector using the push_back() function. The information about a particular cardholder is stored by instantiating an object of the CardHolders class and calling the constructor (`CardHolders person(name, rank, suit)`). The cards associated with a cardholder are represented as objects of the CardHolders class, where the constructor for the class stores the information (name, rank, and suit) about each cardholder as a string, integer, and character respectively. The constructor contains an if statement and a switch case to check if the rank the user entered is an integer, and if it isn't, then the ASCII values for J, Q, K, and A are checked, and the rank variable is assigned a new value. Another switch case is used in the constructor to assign the suit a value based on the character the user entered ('S' = 4, 'H' = 3, 'D' = 2, and 'C' = 1).  These integer values of the rank and the suit are used to assign each cardholder a value (eventually used for ranking) based on the card value he/she has by adding the rank^2 + the suit_num value (to avoid false rankings, I squared the rank instead of adding just the rank and the suit_num value). These "personRank" values are used to sort the cardholders in the order of highest card value to lowest. After all the cardholders are added to the vector, the "sortCardHolders()" function takes the vector of CardHolders objects and sorts them in decreasing order using the bubble sort method; the function then prints out the names of the cardholders (in decreasing order).

	I ensured that my program worked properly by running the executable multiple times and by running the memory, output, and time tests. My program passed all of the tests, and I manually entered a variety of cardholders and their card values to ensure that my program was working properly and sorting the cardholders in order of highest card value to lowest.
