Program: report.txt
Author: Roann Yanes (please open in a bigger window)

  From the programmer's perspective, the program works by first creating a templated Node class and declaring the templated List class before the Node class. The Node class's interface is then created and List is declared a friend of the Node class. The Node class contains a constructor and a getData() function that returns the data for a linked list node. The interface also has a pointer to the next object that is private. In Node's implementation, the constructor and getData() function are created. The templated List class's interface is then created and contains the constructor, deconstructor, a print function, two methods to add a new node to the linked list, a method to retrieve a specific node, and a function that determines the size of a list (nodeCount()). Two instantiations of the Node class were used to create "*head" (creates the first element in the list) and "newNode" which is a helper function that creates a new node; these are private. In the class implementation of the LinkedList class,  the constructor initializes "head" to NULL, and the deconstructor deletes all nodes. The newNode() function creates a new node with the value specified, the empty() function returns a value to indicate whether or not the list is empty, and the pushFront() and pushBack() methods add a new node (using the newNode() method) to the beginning or end of the list respectively. The nodeCount() method increments a counter every time a new node is added to the linked list and returns the size of the list. The print() method display the contents of the linked list on the same line by running through a for-loop until the list hits "NULL". The getNode() method works similarly to the getData() method in that it returns the value of the node at the specified location, but it uses a numerical index and a for loop to do so. The addNumberLists() function adds two lists of any size and returns their sum (which is also a list). It contains three if-statements that check whether or not the two lists entered are the same size and enters the corresponding if-statement based on their sizes. If the first list is longer than the second list, zeros are added to the end of the second list (to make them equal), and the lists are added element-by-element (using a for loop) to ensure that the sums or the two lists (which are numbers) are being added properly, and then each sum is stored in a new list as a new node. If the sum of a new node is greater than 10, then 10 is subtracted from the node and carry is set to 1 to add it new lists's next node. If the second list is longer than the first list, zeros are added to the end of the first list (to make them equal), and the lists are added in a manner that is similar to the method described above. If the lists are equal in size, then the lists are added in a way that is similar to the method described above.
  In main(), while the user does not enter "CTRL-D" ( which is the purpose of `while (cin >> numString1 >> numString2`) two numbers (of any size) are read in as strings, converted to chars (to extract each element of the string one-by-one) and converted to numbers and added to their respective lists by using  pushFront(), using a for loop (there are two instantiations of the List class in the while loop to create a new linked list for each number the user enters). A new list is instantiated and the new list returns the sum of adding the first two lists the user entered using the addNumberLists() method (described above). The new list (which is the sum) is then printed to the user all on one line.
  
  I ensured that my program worked properly by running the executable multiple times and by running the memory, output, and time tests.

  When programmers dynamically allocate memory, "delete" is used in the deconstructor to free this memory. When "delete" is called on a pointer, this frees the memory of what the pointer is pointing to, not the pointer itself. After "delete" is called on a pointer at the start of an array, the array is deleted, and the pointer is set equal to NULL.
