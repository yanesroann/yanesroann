Program: report.txt (please read in a large window)
Author: Roann Yanes 

    From the user's perspective, the program works by asking the user if he/she would like to play against another human (option 1) or against the computer (option 2).  If the user chooses option 1, then the player and a friend can play Connect Four until the player or his/her friend wins. The person who is "Player 1"  is 'X' and can add pieces to the board by entering the number of the column in which he/she would like to place the piece. If "Player 1" enters a number that does not correspond to a column number on the board, an error message will appear to the user, and the player will be asked to enter a valid number. If he/she enters the number of a column that is completely filled with pieces, an appropriate error message will appear, and the user is prompted to enter another number. After "Player 1" places an 'X', "Player 2" is asked to enter the number of the column in which he/she would like to place the piece in ("Player 2's piece is an 'O').  If "Player 2" enters a number that does not correspond to a column number on the board, an error message will appear to the user, and the player will be asked to enter a valid number. If he/she enters the number of a column that is completely filled with pieces, an appropriate error message will appear, and the user is prompted to enter another number. The players are asked to enter pieces until one of them gets four pieces in a row and wins the game. Upon winning, the user is congratulated, and the program ends. The program also ends if the board is completely filled with pieces and neither user has four pieces in a row. The user can also exit the game by entering "-1." 
    If the user chooses "option 2",  he/she goes first and can add pieces to the board by entering the number of the column in which he/she would like to place the piece. If he/she enters a number that does not correspond to a column number on the board, an error message will appear to the user, and the player will be asked to enter a valid number. If he/she enters the number of a column that is completely filled with pieces, an appropriate error message will appear, and the user is prompted to enter another number. After the user places an 'X', the computer randomly places an 'O' piece on the board in a column that is open. The player and the computer continue to enter pieces until one of them gets four pieces in a row and wins the game. Upon winning, the user is congratulated, and the program ends. The program also ends if the board is completely filled with pieces and neither the user or the computer has four pieces in a row. The user can also exit the game by entering "-1."

    From the programmer's perspective, the program (C4main) works by instantiating an instance of the C4Board class, and then calling the "play()" method of that class. In "C4Board.cpp", the "play()" method first takes in a variable to determine if the user would like to play against a human (option 1) or the computer (option 2). The program enters a switch case based on the user's choice. If the user chooses option 1, then the empty board is displayed to the user, and the program enters a while loop that runs while the board is not full and while the user does not enter "-1" to exit.  "Player 1" ('X') goes first ("turn%2" == 0) and is asked to input a valid column number to place his/her disk on the board. If he/she enters an invalid number, the program displays an error message, and the user is asked to enter a valid number. The disc is added to the board using the "addDisc()" method which checks to make sure that the column that the user entered is not already full and then adds the disc in the next available space in the column. After the disc is placed, the program increments the number of discs on the board (to see if the board is full), and uses the "checkNeighbors()" method to see if the user has four pieces in a row (through a series of if-statements). If the user has four pieces in a row, the program congratulates the user, and the program breaks. If not, "turn" is incremented, and "Player 2" is asked to place his/her piece on the board. All of the features for "Player 1" are in the if-statement for "Player 2", except for the fact that "Player 2" is 'O'. If the user chooses option 2, "case 2" is entered and the program runs similarly to option 1, except for the fact that "Player 2" is now a computer that uses "rand()" to randomly choose a number between 1 and 7 to add a disc (at random) to one of the 7 columns. The "addDisc()" method checks to ensure that the computer does not try to add a disc in a column that is already completely full by using the "isFull()" method. 
    Deconstructors are necessary for dynamic memory management because they are used when variables go out of scope and clean up the program automatically; deconstructors free allocated memory by releasing the memory taken up by the pointer but not releasing the memory of the object that the pointer points to.
    
    In order to verify that the program works properly, I ran the executable several times. I tested the "player vs. player" option of the program to ensure that all the features were running properly. I also attempted to add discs to the board in columns that were already full to ensure that the error messages were working properly and to ensure that discs weren't being added over other discs. I chose to input discs in columns that did not exist on the board to see if discs were not being added outside of the board. I also filled the board with discs to see if the program would exit, and I tried to win Connect 4 by having 4 pieces in a row vertically, diagonally, and horizontally to ensure that the function to detect a win was working properly. I played against the computer to see if the "player vs. computer" option was working properly, as it has all of the features of the "player vs. player" option (except for the fact that the computer uses rand() to place a new disc). I also made sure that the computer was not placing discs outside of the board.
