Program: report.txt
Author: Roann Yanes

	From the user's perspective, the program allows the user to enter the number of edges in the directed graph, followed by the pairs of nodes where the first string is the source and the second string is the destination, which indicates that there is an edge from source to destination. After this, the user can enter the number of paths or routes to search for and which exact paths, as a a series of source and destination pairs. The program reads in from standard input and runs until the user enters CTRL-D or quits the program. The program tells the user if there is a path between two nodes in the graph.

	From the programmer's perspective, the program begins by initializing the number of edges, paths, amd number of graphs the user will input. An adjacency matrix is also created to represent the directed graph (`map<char, set<char>> adjacency_matrix`). The source and destination are read in (inside a while loop that runs until the user enters CTRL-D) and stored in the adjacency matrix using the insert function. Then, the number of paths to search for are read in and the source and destination (as well as the adjacency matrix) are passed into the internal `is_there_a_path()` function, which is an implementation of the depth-first search traversal. The result of the internal function is stored in a boolean value, and based on the boolean value, the user is informed if there is a path between two nodes in the graph. The `is_there_a_path()` function implements the depth-first search algorithm that traverses the graph in a depthward motion and uses a stack to get the next vertex to search for in the graph. The function first pushes the node (indicated as source) to the top of a stack and then searches the stack while it is not empty. If the value from the top of the stack matches the destination, then a path was found. If there was no path found, then the value from the stack is added to the set, and the rest of the nodes from the map (adjacency matrix) are pushed to the stack. The function returns true or false based on if there was a path found or not.
	
	I ensured that my program worked properly by running the executable multiple times and by running the memory, output, and time tests. My program passed all of the tests, and I manually entered a variety of directed graphs to ensure that my program was working properly and correctly determining if there is a path between two nodes in the graph.
